package com.my.occ.controllers;

import com.my.core.services.AlgoliaService;
import de.hybris.platform.commercefacades.product.data.ProductData;
import de.hybris.platform.commercewebservicescommons.dto.product.ProductListWsDTO;
import de.hybris.platform.commercewebservicescommons.dto.product.ProductWsDTO;
import de.hybris.platform.core.servicelayer.data.SearchPageData;
import de.hybris.platform.webservicescommons.swagger.ApiBaseSiteIdParam;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.ArrayList;
import java.util.List;

@Controller
@RequestMapping(value = "/{baseSiteId}/search")
@Tag(name = "Search")
public class SearchController {

    private static final Logger log = LoggerFactory.getLogger(SearchController.class);

    @Autowired
    private AlgoliaService algoliaService;

    @RequestMapping(value = "/algoliaSearch", method = RequestMethod.GET)
    @Operation(operationId = "Algolia Search", summary = "Algolia Search")
    @ResponseBody
    @ApiBaseSiteIdParam
    public ProductListWsDTO algoliaSearch(@RequestParam(value = "query") String query,
                                          @RequestParam(value = "page") int page,
                                          @RequestParam(value = "hitsPerPage") int hitsPerPage) {
        SearchPageData<ProductData> productDataList = algoliaService.searchProducts(query,page, hitsPerPage);
        final ProductListWsDTO productListWsDTO = new ProductListWsDTO();
        List<ProductWsDTO> productWsDTOs = new ArrayList<>();
        for(ProductData productData : productDataList.getResults()){
            ProductWsDTO productWsDTO = new ProductWsDTO();
            productWsDTO.setCode(productData.getCode());
            productWsDTO.setName(productData.getName());
            productWsDTO.setDescription(productData.getDescription());
            productWsDTOs.add(productWsDTO);
        }
        productListWsDTO.setProducts(productWsDTOs);
        productListWsDTO.setCurrentPage(page);
        productListWsDTO.setTotalPageCount(productDataList.getPagination().getNumberOfPages());
        return productListWsDTO;

//        productListWsDTO.setProducts(productDataList.getResults()
//                .stream() //
//                .map(productData -> getDataMapper().map(productData, ProductWsDTO.class)) //
//                .collect(Collectors.toList()));
//        SearchPageData<ProductWsDTO> productListWsDTOSearchPageData = new SearchPageData<>();
//        productListWsDTOSearchPageData.setPagination(productDataList.getPagination());
//        productListWsDTOSearchPageData.setResults(productDataList.getResults()
//                .stream() //
//                .map(productData -> getDataMapper().map(productData, ProductWsDTO.class)) //
//                .collect(Collectors.toList()));
//        return productListWsDTOSearchPageData;
    }
}
